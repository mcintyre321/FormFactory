@using FormFactory
@using FormFactory.Attributes
@using System.Linq
@model PropertyVm
 @{
     var propertyVm = Model;
     if (propertyVm.IsHidden)
     {
         <div style="display: none">@Html.BestProperty(propertyVm)</div>
     }
     else
     {
         if (propertyVm.IsHidden)
         {
             <div style="display: none">@Html.BestProperty(propertyVm)</div>
         }
         else
         {
             var validClass = Html.HasErrors(propertyVm.Name) ? "error" : "valid";
             <div class="form-group has-@validClass">
                 @if (!propertyVm.HasAttribute<NoLabelAttribute>() && !propertyVm.HasAttribute<LabelOnRightAttribute>())
                 {
                     var required = propertyVm.NotOptional ?? (propertyVm.Readonly
                                                               || propertyVm.HasAttribute<RequiredAttribute>()
                                                               || propertyVm.Choices != null);
                     var optionalText = required ? "" : "<span class='is-optional-hint'> (optional)</span>";

                     <label class="control-label" for="@propertyVm.Id">@propertyVm.DisplayName()@Html.Raw(optionalText)</label>
                 }

                 @Html.BestProperty(propertyVm)
                 <span class="help-block">
        <span class="field-validation-@validClass" data-valmsg-for="@propertyVm.Name" data-valmsg-replace="true">
            @Html.AllValidationMessages(propertyVm.Name)
        </span>
        @(propertyVm.GetCustomAttributes().OfType<FormFactory.Attributes.DescriptionAttribute>().Select(a => a.Description).SingleOrDefault())
    </span>
             </div>
         }
     }
 }
