@using System
@using System.ComponentModel.DataAnnotations
@using System.Net
@using FormFactory.Example.Controllers
@using FormFactory.Example.Models.Examples
@using FormFactory.AspMvc
@using FormFactory

@{
    ViewBag.Title = "FormFactory Examples";
}
@model FormFactory.Example.Controllers.HomeController.IndexModel
 
<h1 class="page-header">
    Rendering objects
</h1>
@{
    
}
@foreach (var typeWithSource in Model.exampleTypes)
{
    <div class="row">
        <div class="col-md-12">
            <h3>@typeWithSource.Item1</h3>

        </div>
    </div>
    <div class="row">

        <div class="col-md-4">


            <form action="/home/save" method="POST">
                @{
                    var instance = Activator.CreateInstance(typeWithSource.Item1);
                    //if (string.IsNullOrWhiteSpace(Request.Params["UseRazorEngine"]))
                    {

                        @(FormFactory.FF.PropertiesFor(instance).Render(Html))
                    }
                    @*else
                    {
                        var helper = new FormFactory.RazorEngine.RazorTemplateHtmlHelper();
                        var propertiesFor = helper.PropertiesFor(instance);
                        @Html.Raw(propertiesFor.Render(Html)) //needs to be made raw as we are in MVC
                    }*@
                }
                <input type="submit" value="submit" />
            </form>
        </div>
        <div class="col-md-8">
            <p>In @(typeWithSource.Item1.Name).cs</p>
            <pre class="prettyprint">@(typeWithSource.Item2)</pre>
        </div>
    </div>

    }

@*<div class="row">
    <div class="col-md-6">
        <h2>Form for MVC action:</h2>

        <p>
            Given this action...

            <pre class="prettyprint">
    [HttpPost] public virtual ActionResult SignIn(string email, [DataType(DataType.Password)] string password)
        { //... } 
</pre>
        </p>
        <p>
            ..writing this in the view...
            <pre class="prettyprint"> 
        var form = Html.FormForAction((HomeController c, string p0, string p1) => c.SignIn(p0, p1));
        @@form.Render(Html); //renders the form
    </pre>
        </p>

    </div>
    <div class="span1">&nbsp;</div>
    <div class="col-md-5">
        <p>...will render this form:</p>
        @{

            var form = Html.FormForAction((HomeController c, string p0, string p1) => c.SignIn(p0, p1));
            @form.Render(Html);
        }
    </div>
</div>*@
<div class="row">
    <div class="col-md-6">
        <h2>Programatically created form</h2>

        <p>
            By default FF reflects against a view model to produce a `PropertyVm[]` array, but you can also create the properties programatically, e.g. you could load a form definition from a database<br />
            You can build any of the examples above.

            <pre class="prettyprint">
//Build a model up in your controller or view   
var formModel = new[]
{
    new PropertyVm(typeof(string), "username")
    {
        DisplayName = "Username",
        NotOptional = true,
    },
    new PropertyVm(typeof(string), "password")
    {
        DisplayName = "Password",
        NotOptional = true,
        GetCustomAttributes = () => new object[]{ new DataTypeAttribute(DataType.Password) }
    },
    new PropertyVm(typeof(string), "os")
    {
        DisplayName = "Operating System",
        NotOptional = true,
        Choices = new List&lt;>() {"OSX", "IOS", "Windows", "Android"},
        Value = "Windows", //Preselect windows
        GetCustomAttributes = () => new object[] {new DataTypeAttribute(customDataType: "Radio")},
    }
};
	    
...
//render it in your view
@@formModel.Render(Html)            </pre>
        </p>

    </div>
    <div class="span1">&nbsp;</div>
    <div class="col-md-5">
        <p>...will render this form:</p>
        @{

            var formModel = new[]
            {
                new PropertyVm(typeof(string), "username")
                {
                    DisplayName = "Username",
                    NotOptional = true,
                },
                new PropertyVm(typeof(string), "password")
                {
                    DisplayName = "Password",
                    NotOptional = true,
                    GetCustomAttributes = () => new object[] {new DataTypeAttribute(DataType.Password)}
                },
                new PropertyVm(typeof(string), "os")
                {
                    DisplayName = "Operating System",
                    NotOptional = true,
                    Choices = new List<string>() {"OSX", "IOS", "Windows", "Android"},
                    Value = "Windows", //Preselect windows
                    GetCustomAttributes = () => new object[] {new DataTypeAttribute(customDataType: "Radio")},
                }
            };

            @formModel.Render(Html)
        }
    </div>
</div>
